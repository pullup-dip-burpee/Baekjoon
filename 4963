//silverysky 4963
#include <iostream>
#include <queue>
using namespace std;

int w, h;//input
typedef struct _rc{
    int r, c;
} rc;//row : h, col : w

int map[50][50]={0,};//[height][width]
//8가지 방향(상하좌우, 대각)에 대해 검사
int NS[8] = {1,-1,0,0,1,1,-1,-1};//North South
int WE[8] = {0,0,1,-1,1,-1,1,-1};//West East
//BFS 큐
queue<rc> q;
rc rc0 = {-1, -1};
//BFS 출발지점 찾기
rc find_sp(){
    rc tmp;
    for(int i=0; i<h; i++){
        for(int j=0; j<w; j++){
            if(map[i][j]==1){
                tmp.r = i;
                tmp.c = j;
                return tmp;
            }
        }
    }
    return rc0;//map의 범위에 더 이상 1이 없으면 rc0 리턴
}
bool in_range(int adj_h, int adj_w){
    if(0<=adj_h && adj_h<h && 0<=adj_w && adj_w<w)
        return true;
    return false;
}
void BFS(rc a){
    rc b;
    map[a.r][a.c] = 0;
    q.push(a);
    while(!q.empty()){
        b = q.front();
        q.pop();
        
        for(int i=0; i<8; i++){
            int adj_h = b.r+NS[i], adj_w = b.c+WE[i];
            if(in_range(adj_h, adj_w) && map[adj_h][adj_w]==1){
                rc tmp = {adj_h, adj_w};
                q.push(tmp);
                map[adj_h][adj_w]=0;
            }
        }
    }
}
int main(void){

    int res = 0;//섬의 개수
    //first input
    
    scanf("%d %d", &w, &h);
    while(w>0 && h>0){
        for(int i=0; i<h; i++){
            for(int j=0; j<w; j++)
                scanf("%d", &map[i][j]);
        }
        //BFS로 섬의 개수 구하기
        rc sp = find_sp();        
        while(sp.r>=0){//map의 범위에 땅이 없을 때까지
            BFS(sp);
            res++;
            sp = find_sp();
        }
        
        //output
        printf("%d\n", res);
        //next input
        scanf("%d %d", &w, &h);
        res=0;
    }
    return 0;
}
