//silverysky 1966 프린터 큐
#include <iostream>
#include <string>
#include <cstdlib>
#include <vector>
using namespace std;
typedef struct _node{
    int key;
    int priority;
    struct _node* next;
} node;

class queue{
    node* head;
    node* tail;
    int n;
public:
    queue(){
        head = NULL;
        tail = NULL;
        n=0;
    }
    void push(int x, int p);//문서번호가 x이고 중요도가 p인 문서를 큐에 저장
    int pop();
    void size();
    bool empty();//비었으면 true
    void front();//맨 앞 반환
    bool search_move();//맨 앞의 중요도가 제일 큰지 검사하고 더 큰 게 있으면 맨 앞 문서를 맨 뒤로 옮김
};

void queue::push(int x, int p){
    node* tmp = (node*)malloc(sizeof(node));
    tmp->key = x;
    tmp->priority = p;
    tmp->next = NULL;
    if(n==0){
        head = tmp;
        tail = tmp;
    }
    else{
        tail->next = tmp;
        tail = tmp;
    }
    n++;
}
int queue::pop(){
    node* tmp_pop;
    if(n==0){
        printf("%d\n", -1);
        return -1;
    }
    else{
        int tmp = head->key;
        tmp_pop = head;
        head = head->next;
        free(tmp_pop);
        n--;
        return tmp;
    }
}
void queue::size(){
    printf("%d\n", n);
}
bool queue::empty(){
    if(n==0)
        return true;
    else
        return false;
}
void queue::front(){
    if(n!=0)
        printf("%d\n", head->key);
    else
        printf("-1\n");
}
bool queue::search_move(){
    node* curr = head;
    while(curr != NULL){
        if(curr->priority > head->priority){
            curr = head;
            head = head->next;
            tail->next = curr;
            tail = tail->next;
            tail->next = NULL;
            return true;
        }
        curr = curr->next;
    }
    
    return false;
}
int main(void){
    vector<int> order;
    int N, M;
    int T;
    int tmp;
    cin>>T;
    for(int i=0; i<T; i++){
        order.clear();
        queue q = queue();
        cin>>N>>M;
        for(int j=0; j<N; j++){
            cin>>tmp;
            q.push(j, tmp);//j번 문서, 중요도 tmp를 큐에 저장
        }

        while(q.empty() == false){
            while(q.search_move() == true){//맨 앞보다 중요도 높은 게 없을 때까지
                ;
            }
            order.push_back(q.pop());//제일 중요한 문서 제거.
        }
        for(int j=0; j<order.size(); j++){
            if(order[j]==M){
                printf("%d", j+1);
                break;
            }
        }
        printf("\n");
    }
    
    return 0;
}
