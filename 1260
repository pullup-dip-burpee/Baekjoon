//silverysky 1260 DFS, BFS
//양방향 그래프임
//인접 리스트 구현이고 리스트 만드는 대신 vector를 사용
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

class graph{
public:
	vector<vector<int> > list;//이차원 벡터의 각 요소 벡터의 0번째 원소는 노드 번호, 이후는 연결된 노드 번호임. 0번은 비우고 1번부터 시작.
	vector<int> stack;//stack 구현 대신 STL vector 사용
	queue<int> BFSqueue;//STL queue 사용
	
	int vertex_num;
	graph(){
		list.clear();
		stack.clear();
		
		vector<int> tmp = {0};//편의를 위해 list의 첫 원소는 빈 벡터로 함
		list.push_back(tmp);
		vertex_num = 0;//vertex의 개수
	}
	void add_vertex(int a);
	void add_edge(int a, int b);
	bool visited(int v);
	void DFS(int v);
	void BFS(int s);
};
void graph::add_vertex(int a){
	vector<int> tmplist;
	tmplist.push_back(a);
	list.push_back(tmplist);
	vertex_num++;
}
void graph::add_edge(int a, int b){//중복 edge 있는지 없는지 검사 미구현
	for(int i=1; i<=vertex_num; i++){
		if(list[i][0] == a){
			list[i].push_back(b);
			break;
		}
	}
	for(int i=1; i<=vertex_num; i++){
		if(list[i][0] == b){
			list[i].push_back(a);
			break;
		}
	}
	sort(list[a].begin()+1, list[a].end());
	sort(list[b].begin()+1, list[b].end());
}
bool graph::visited(int v){
	for(int i=0; i<stack.size(); i++){
		if(stack[i]==v)
			return true;
	}
	return false;
}
void graph::DFS(int v){
	printf("%d ", v);
	stack.push_back(v);
	for(int i=1; i<list[v].size(); i++){//0번은 그 노드의 번호이므로 제외
		if(!visited(list[v][i])){
			DFS(list[v][i]);
		}
	}
}
void graph::BFS(int s){
	int v;
	printf("%d ", s);
	BFSqueue.push(s);
	stack.push_back(s);
	while(!BFSqueue.empty()){
		v = BFSqueue.front();
		BFSqueue.pop();
		for(int i=1; i<list[v].size(); i++){
			if(!visited(list[v][i])){
				printf("%d ", list[v][i]);
				BFSqueue.push(list[v][i]);//enqueue
				stack.push_back(list[v][i]);//visited
			}
		}
	}
}
int main(void){
	graph g = graph();
	int N, M, V;
	int a, b;
	
	//input - make a graph
	cin>>N>>M>>V;
	for(int i=1; i<=N; i++){
		g.add_vertex(i);
	}
	for(int i=0; i<M; i++){
		cin>>a>>b;
		g.add_edge(a, b);
	}
	//DFS
	g.DFS(V);
	cout<<endl;
	g.stack.clear();
	//BFS
	g.BFS(V);
	return 0;
}
