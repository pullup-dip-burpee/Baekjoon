//silverysky 10451
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class graph{
public:
	vector<vector<int> > list;
	vector<int> stack;
	
	int vertex_num;
	graph(){
		list.clear();
		stack.clear();
		
		vector<int> tmp = {0};//편의를 위해 list의 첫 원소는 빈 벡터로 함
		list.push_back(tmp);
		vertex_num = 0;//vertex의 개수
	}
	void add_vertex(int a);
	void add_edge(int a, int b);
	bool visited(int v);
	void DFS(int v);
};
void graph::add_vertex(int a){
	vector<int> tmplist;
	tmplist.push_back(a);
	list.push_back(tmplist);
	vertex_num++;
}
void graph::add_edge(int a, int b){
	for(int i=1; i<=vertex_num; i++){
		if(list[i][0] == a){
			list[i].push_back(b);
			break;
		}
	}
}
bool graph::visited(int v){
	for(int i=0; i<stack.size(); i++){
		if(stack[i]==v)
			return true;
	}
	return false;
}
void graph::DFS(int v){
	printf("DFS : %d  ", v);//erase
	stack.push_back(v);
	for(int i=1; i<list[v].size(); i++){//0번은 그 노드의 번호이므로 제외
		if(!visited(list[v][i])){
			DFS(list[v][i]);
		}
	}
}
int main(void){
    
    int T, N, S;
    int cycle;
    cin>>T;
    for(int i=0; i<T; i++){
        cycle = 0;
        graph g = graph();
        cin>>N;
        for(int j=0; j<N; j++){
            g.add_vertex(j+1);
        }
        for(int j=0; j<N; j++){
            scanf("%d", &S);
            g.add_edge(j+1, S);
        }
        
        for(int j=0; j<N; j++){
            if(!g.visited(j+1)){
                g.DFS(j+1);
                cycle++;
                cout<<"\n----------------\n";//erase
            }
        }
        cout<<cycle<<endl;
    }
    
    
    return 0;
}
